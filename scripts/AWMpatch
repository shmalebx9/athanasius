#!/usr/bin/bash


check_type(){
case $name in
    *picom*)
    KILL=true
    PROGRAM="picom"
    DESTINATION="$XDG_CONFIG_HOME/picom.conf"
    SPECIAL=true
    ;;
    *compton*)
    KILL=true
    PROGRAM="compton"
    DESTINATION="$XDG_CONFIG_HOME/compton/compton.conf"
    ;;
    *dunst*)
    KILL=true
    PROGRAM="dunst"
    DESTINATION="$XDG_CONFIG_HOME/dunst/dunstrc"
    SPECIAL=true
    ;;
    *rofi*)
    KILL=false
    PROGRAM="rofi"
    DESTINATION="$XDG_CONFIG_HOME/rofi/config.rasi"
    ;;
    *polybar*)
    mkdir -p "$XDG_CONFIG_HOME/polybar"
    KILL=true
    PROGRAM="polybar"
    DESTINATION="$XDG_CONFIG_HOME/polybar/$(basename $name)"
    SPECIAL=true
    ;;
    *nvim*|*neovim*|init.vim)
    KILL=false
    PROGRAM="nvim"
    DESTINATION="$XDG_CONFIG_HOME/nvim/init.vim"
    ;;
    *vim*)
    KILL=false
    PROGRAM="vim"
    DESTINATION="$XDG_CONFIG_HOME/.vimrc"
    ;;
    *alacritty*|*alacritty.yaml*)
    KILL=false
    PROGRAM="alacritty"
    DESTINATION="$XDG_CONFIG_HOME/alacritty/alacritty.yaml"
    ;;
    *qutebrowser*|*config.py*)
    PROGRAM="qutebrowser"
    KILL=false
    DESTINATION="$XDG_CONFIG_HOME/qutebrowser/config.py"
    ;;
    .*)
    KILL=false
    PROGRAM="UNKNOWN"
    DESTINATION="$HOME/$name"
    ;;
    *rc)
    KILL=false
    PROGRAM="UNKNOWN"
    if -[[ f "$XDG_CONFIG_HOME/${name%rc*}/$name" ]] ; then
    DESTINATION="$XDG_CONFIG_HOME/${name%rc*}/$name"
    else
    echo "couldn't find destination"
    exit 1
    fi
    ;;
    *)
    KILL=false
    PROGRAM="UNKNOWN"
    if [[ -f "$XDG_CONFIG_HOME/$name" ]] ; then
        DESTINATION="$XDG_CONFIG_HOME/$name"
    elif [[ -d "$XDG_CONFIG_HOME/${name%.*}" ]] ; then
        DESTINATION="$XDG_CONFIG_HOME/${name%.*}/$name"
    else
    echo "could not find destination directory"
    exit 1
    fi
    ;;   

esac
echo -e "detected $PROGRAM \nDestination: $DESTINATION"
}

backup(){
    if [[ -e $DESTINATION ]] ; then
    bkupname=$(basename $DESTINATION)$(date +"%Y-%m-%d-%T")
     cp -v $DESTINATION $AWMdir/backups/$bkupname
    else
     echo "noting to back up"
    fi
    echo "$bkupname $DESTINATION" >> $AWMdir/backups/manifest.txt
}

special(){
    case $PROGRAM in
    polybar)
        echo "executing special setup commands for polybar"
        bars=$(awk -F '/' '{ORS=" "} /\[bar/ {gsub("]",""); print $2}' $config)
        echo "found bars $bars"
        set $bars
        killall AWMbar bar lemonbar yabar polybar
        polybar $1 >/dev/null 2>&1 &
        ;;
    dunst)
        echo "executing special setup commands for dunst"
        setsid dunst >/dev/null 2>&1 &
        dunstify -i info "Dunst Restarted"
        ;;
    picom)
        echo "restarting picom"
        setsid picom >/dev/null 2>&1 &
        ;;
    esac
}

patch(){
    if [[ $KILL = true ]] ; then
    killall $PROGRAM
    fi

    cp -v $config $DESTINATION
}

restore(){
    lastbkup=$(tail -n1 $AWMdir/backups/manifest.txt)
    set $lastbkup
    cp -v $AWMdir/backups/$1 $2 && \
    sed -i '$ d' $AWMdir/backups/manifest.txt
}

linkhandler(){
mkdir -p /tmp/AWMconfigland
    case $1 in
        *github.com*/blob/*)
        DOWNLINK=$(echo $1 | sed 's,/blob/,/raw/,g')
        ;;
        *gitlab.com*/blob/*)
        DOWNLINK=$(echo $1 | sed 's,/blob/,/raw/,g')
        ;;
        *gist.github.com*)
            case $1 in 
            *raw*)
            DOWNLINK="$1"
            ;;
            *)
            echo "AWMpatch cannot generate raw download links from github gists. Please retry using the raw link."
            exit 1
            ;;
            esac
        ;;
        *)
        DOWNLINK="$1"
    esac
    echo "Downloading config from $DOWNLINK"
    wget $DOWNLINK -P /tmp/AWMconfigland
    name="$DOWNLINK"
    config="/tmp/AWMconfigland/${DOWNLINK##*/}"
    mkdir -p "$AWMdir/backups"

    check_type
    backup
    patch
    if [[ $SPECIAL = true ]] ; then 
    special 
    fi
rm -rf /tmp/AWMconfigland
}

case $1 in
    -r)
    restore
    ;;

    http://*|https://*|ftp://*)
    linkhandler $1
    ;;
    *)
    config="$(readlink -f $1)"
    name="$1"
    mkdir -p "$AWMdir/backups"

    check_type
    backup
    patch
     if [[ $SPECIAL = true ]] ; then 
     special
     fi
;;
esac

exit 0