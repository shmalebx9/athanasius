#!/usr/bin/bash

PANEL_FIFO="/tmp/panel-fifo"
[[ -p $PANEL_FIFO ]] || mkfifo -m 600 "$PANEL_FIFO" 

. $AWMdir/athanasius.conf

ds=("•" "•" "•" "•" "•" "•" "•")

#colours
focus="#262626"
focus_bg="#47cdda"

unfocus="#ebf0f2"
unfocus_bg="#2e2c2e"

urgent="#ff3333"

occupied="#ebf0f2"
occupied_bg="#424142"

FG_PANEL="#ebf0f2" 						# Panel's text colour
BG_PANEL="#2e2c2e"						# Panel's background colour

FONT="Terminus:size=11"



### Geometry
readonly PANEL_WIDTH=1920
readonly PANEL_HEIGHT=35
readonly PANEL_X=0		#panel offset to the right
readonly PANEL_Y=0			#panel offset down
GEOMETRY="$PANEL_WIDTH"x"$PANEL_HEIGHT"+"$PANEL_X"+"$PANEL_Y"

#MMWM workspaces
Mworkspaces() {
while read -t 60 -r wmout || true; do
    if [[ $wmout =~ ^(([[:digit:]]+:)+[[:digit:]]+ ?)+$ ]]; then
        read -ra desktops <<< "$wmout" && unset r
        for desktop in "${desktops[@]}"; do
            IFS=':' read -r d w m c u <<< "$desktop"
            fg="%{F$unfocus B$unfocus_bg}"
            ((w)) && fg="%{F$occupied B$occupied_bg}"
            ((c)) && fg="%{F$focus B$focus_bg}" 
      #      || fg="%{F$unfocus B$unfocus_bg}"
            ((u)) && w+="%{F$urgent}"
             #r+="[${w/tt/-}] $fg${ds[$d]} "
             r+="$fg ${ds[$d]} "
        done
        #r="${r%::*}"
    fi
    echo "W$r" 
done > "$PANEL_FIFO" &
}

Bspwmparse(){
while read -r line ; do
      wm_infos=""
      IFS=':'
      set -- ${line#?}
      while [ $# -gt 0 ] ; do
        item=$1
        name=" • "
        case $item in
          O*)
            # focused occupied desktop
            wm_infos="${wm_infos}%{F$focus}%{B$focus_bg}${name}"
            ;;
          F*)
            # focused free desktop
            wm_infos="${wm_infos}%{F$focus}%{B$focus_bg}${name}"
            ;;
          U*)
            # focused urgent desktop
            wm_infos="${wm_infos}%{F$focus}%{B$focus_bg}${name}"
            ;;
          o*)
            # occupied desktop
            wm_infos="${wm_infos}%{F$occupied}%{B$occupied_bg}${name}"
            ;;
          f*)
            # free desktop
            wm_infos="${wm_infos}%{F$unfocus}%{B$unfocus_bg}${name}"
            ;;
          u*)
            # urgent desktop
            wm_infos="${wm_infos}%{F$unfocus}%{B$urgent}${name}"
            ;;
        esac
        shift
      done
	echo "W${wm_infos}"
done
}

Workspaces(){
case "$WM" in
	bspwm)
	sleep 1 ; bspc subscribe report | Bspwmparse ;;
	mmwm)
	tail -f /tmp/mmwm-file | Mworkspaces ;;
esac
}

Date(){
while true; do
	date "+S %a %b %d | %I:%M %p "
	sleep 30
done
}

Wifi(){
while true; do
	WIFISTR=$( iwconfig $INTERFACE | awk -F' ' 'BEGIN{ sum=0} {gsub("Quality=",""); sum+= $2 * 1.4 } END{ printf "%d\n", sum}' )
	if [ -n "$WIFISTR" ] ; then
	 echo "N$WIFISTR%"
	else
		echo "NNONE"
	fi
	sleep 5
done
}

Bat(){
while true; do
	CHARGING=$(cat /sys/class/power_supply/"$BATTERY"/status)
	BATPERC=$(cat /sys/class/power_supply/"$BATTERY"/capacity)
	if [ "$CHARGING" = "Discharging" ] ; then
		echo "D$BATPERC%"
			if [ $BATPERC -lt 10 ] ; then
				notify-send "WARNING: Low Battery"
			fi
			else
		echo "D[$BATPERC%]" 
	fi
sleep 50
done
}

Sound(){
	VOL=$(AWMgetvolume)
	if AWMgetmute;
		then
		echo "V$VOL%"
	else
		echo "V[$VOL]"
	fi
}

Ram() {
while true ; do
	free -m | awk -F' ' 'NR==2 {print "R" $3 "MB"}'
sleep 3
done
}

Cpu(){
	while true ; do
	 awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1); }' <(grep 'cpu ' /proc/stat) <(sleep 2 ;grep 'cpu ' /proc/stat) | awk '{print "P" int($1+0.5) "%"}'
	done
}

Device_view(){
while read -r line ; do
set -- $line
    case $line in
    connected:*)
    echo 'U[|-] \\'
    ;;
    disconnected:*)
    echo 'U'
    ;;
    mounted:*)
    echo "U%{A:u $2:}[M|-] \\%{A}"
    ;;
    unmounted:*)
    echo "U%{A:m $2:}[U|-] \\%{A}"
    ;;
	Syncing:*)
	echo 'U[S|-] \\'
    esac
done > "$PANEL_FIFO"
}

tail -F /tmp/mounter-info | Device_view &
Cpu > "$PANEL_FIFO" &
Ram > "$PANEL_FIFO" &
Date > "$PANEL_FIFO" &
Wifi > "$PANEL_FIFO" &
Bat > "$PANEL_FIFO" &
Sound > "$PANEL_FIFO" &
Workspaces > "$PANEL_FIFO" &

# Parse
bar() {
while read -r line ; do
	case $line in
		S*)
			# clock output
			sys="${line#?}%{B-}%{F-}"
			;;
		N*)
			# wifi
			net="${line#?}"
			;;
		D*)
			# battery
			bat="${line#?}"
			;;
		V*)
			# volume
			vol="${line#?}"
			;;
		R*)
			# memory
			ram="${line#?}"
			;;
		P*)
			# cpu
			cpu="${line#?}"
			;;
		W*)
			# workspaces
			wm="${line#?} %{B-}%{F-}"
			;;
		U*)
			device="${line#?}"
			;;
	esac
	printf "%s\n" "%{l}${wm} %{c}${sys} %{r}%{B#47cdda F#262626} ${device} ${ram} \\ ${cpu} \\ ${vol} \\ ${bat} \\ ${net} %{B-F-}"
done
}

Acpiparse() {
while read -r line ; do
	case $line in
		ac_adapter*)
			case $line in
			*00000000)
			BATPERC=$(cat /sys/class/power_supply/"$BATTERY"/capacity)
				echo "D$BATPERC%"
			;;
			*00000001)
			BATPERC=$(cat /sys/class/power_supply/"$BATTERY"/capacity)
				echo "D[$BATPERC%]"
			;;
			esac > "$PANEL_FIFO"
			;;
		button/mute*)
			VOL=$(AWMgetvolume)
			if AWMgetmute; then
				echo "V$VOL%"
			else
				echo "V[$VOL]"
			fi
			;;
		button/volumeup*)
		VOL=$(AWMgetvolume)
			if AWMgetmute; then
				echo "V$VOL%"
			else
				echo "V[$VOL]"
			fi
				;;
		button/volumedown*)
		VOL=$(AWMgetvolume)
			if AWMgetmute; then
				echo "V$VOL%"
			else
				echo "V[$VOL]"
			fi
				;;
		esac > "$PANEL_FIFO"
done
}

Acpiparse < <(acpi_listen) &




bar < "$PANEL_FIFO" \
	| lemonbar -p -a 32 -u 2 \
		-B "$BG_PANEL" \
		-F "$FG_PANEL" \
		-f "$FONT" -f "Hack:size=11" \
		-g "$GEOMETRY" \
	> /tmp/mounter-receive